services:
  api:
    container_name: api-fastapi-cqrs
    build:
      dockerfile: ./Dockerfile
    restart: unless-stopped
    ports:
      - "8000:8000"
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - interconnect
      - postgres.network
    volumes:
      - ./fastapi-cqrs-mediator:/app
    env_file:
      - .env
    command: /bin/sh -c 'alembic upgrade head && python -m src'
    healthcheck:
      test: ["CMD-SHELL", "curl -fsSL http://localhost:8000/api/v1/healthcheck/"]
      interval: 10s
      timeout: 60s
      retries: 5
      start_period: 10s

  postgres:
    container_name: postgres-fastapi-cqrs
    image: "postgres:15.6-alpine3.19"
    hostname: postgres
    restart: unless-stopped
    ports:
      - '5444:5432'
    networks:
      - interconnect
      - postgres.network
    environment:
      POSTGRES_PASSWORD:  ${POSTGRES_PASSWORD-$USER}
      POSTGRES_USER: ${POSTGRES_USER:-$USER}
      POSTGRES_DB: ${POSTGRES_DB:-$USER}
    volumes:
      - postgres.data:/var/lib/postgresql/users:rw
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -d $${POSTGRES_DB} -U $${POSTGRES_USER}"]
      interval: 10s
      timeout: 60s
      retries: 5
      start_period: 10s


volumes:
  postgres.data: {}

networks:
  interconnect:
    driver: bridge
  postgres.network: {}
